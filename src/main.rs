extern crate qip;

use qip::state_ops::{from_tuples, make_sparse_matrix_from_function};
use qip::*;
use std::fs::File;
use std::io::Write;
use num::One;

fn make_time_evolution_circuit(b: &mut dyn UnitaryBuilder, q: Qubit) -> Result<Qubit, CircuitError> {
    let f = get_ham_fn(q.n());
    b.sparse_mat_from_fn("prop", q, f, true)
}

fn main() -> Result<(), CircuitError>{
    let n = 10;
    let mut b = OpBuilder::new();
    let q = b.qubit(n)?;
    let h = q.handle();
    let q = make_time_evolution_circuit(&mut b, q)?;

    let midway = (1 << (n-1));
    let state: Vec<_> = (0 .. 1 << n).map(|indx| {
        Complex {
            re: (indx as f64).cos() * (-((midway - indx) as f64/100.0).powi(2) as f64).exp(),
            im: (indx as f64).sin() * (-((midway - indx) as f64/100.0).powi(2) as f64).exp()
        }
    }).collect();
    let mag: f64 = state.iter().map(|c| c.norm_sqr()).sum();
    let state = state.into_iter().map(|c| c / mag.sqrt()).collect();

    let (state, _) = run_local_with_init::<f64>(&q, &[
        h.make_init_from_state(state)?
    ])?;

    (0 .. 1000).try_fold(state, |state, i| {
        let (mut s, _) = run_with_state(&q, state)?;
        let output_state = s.clone_state(true);

        let mag: f64 = output_state.iter().map(|c| c.norm_sqr()).sum();
        if i % 100 == 0 {
            println!("State mag: {:?}", mag);
            let mut file = File::create(format!("{:?}.txt", i)).unwrap();
            output_state.iter().try_for_each(|c| {
                write!(file, "{:?}\t{:?}\t{:?}\n", c.norm_sqr(), c.re, c.im).map(|_| ()).map_err(|_| "IO Error")
            }).unwrap();
        }

        Ok(s)
    }).map(|_| ())
}

fn get_ham_fn(n: u64) -> Box<dyn Fn(u64) -> Vec<(u64, Complex<f64>)>> {
    if (1 << n) < 100 {
        unimplemented!();
    }

    const SELECTED_ROW: u64 = 49;
    let tups = [
        (3.479865065077993e-33, -7.677691618113014e-33),
        (-2.3350581463578042e-32, -2.9093339860822394e-32),
        (-1.6503693004533852e-31, 4.167541252883843e-32),
        (-1.4219534466236363e-31, 7.639838493655993e-31),
        (2.896733585544575e-30, 2.047657005999991e-30),
        (1.40194883550871e-29, -8.104515655235246e-30),
        (-6.853102227213313e-30, -7.360340990462596e-29),
        (-3.183003081414659e-28, -1.1204734099288883e-28),
        (-1.0720926859732291e-27, 1.106107976759293e-27),
        (2.5408541983964353e-27, 6.556715571254308e-27),
        (3.203867662626316e-26, 1.9764328541413942e-27),
        (6.933914321240648e-26, -1.290874753972298e-25),
        (-4.0297731632385545e-25, -5.338913488553738e-25),
        (-2.983012338406729e-24, 6.521954555781231e-25),
        (-2.988282904991871e-24, 1.361474294146878e-23),
        (5.0755297270351196e-23, 3.837455847168256e-23),
        (2.5599556191848583e-22, -1.3723950812532637e-22),
        (-8.056403479220338e-23, -1.3234835445503474e-21),
        (-5.642027237928272e-21, -2.191673520033509e-21),
        (-1.9855870688693826e-20, 1.921396724789249e-20),
        (4.178398814541522e-20, 1.1900744351045597e-19),
        (5.732464022728e-19, 5.3844346454997146e-20),
        (1.3172777758985924e-18, -2.274404836512568e-18),
        (-6.9176812441969605e-18, -9.80305823326651e-18),
        (-5.385356293756547e-17, 9.978199271203394e-18),
        (-6.139709285412769e-17, 2.4236480148884877e-16),
        (8.878772618067061e-16, 7.171374108453701e-16),
        (4.668296634973656e-15, -2.313288912099962e-15),
        (-6.837825630005957e-16, -2.3773411640695946e-14),
        (-9.98895290241435e-14, -4.253406901202036e-14),
        (-3.670130493721962e-13, 3.3305332772842716e-13),
        (6.807052659381275e-13, 2.157550167405296e-12),
        (1.0246090232366206e-11, 1.294730331663106e-12),
        (2.4922865670636703e-11, -4.0018032404607147e-11),
        (-1.1838521838847168e-10, -1.7972232502514732e-10),
        (-9.712086024644624e-10, 1.4793949132662654e-10),
        (-1.2399902846635752e-09, 4.309779186582041e-09),
        (1.550555428418268e-08, 1.3366904310166917e-08),
        (8.502152189645441e-08, -3.878944528804793e-08),
        (1.4028975364329898e-09, -4.265973095648874e-07),
        (-1.7663544004133846e-06, -8.199435913216695e-07),
        (-6.771119249384548e-06, 5.759997792602946e-06),
        (1.0963675727299905e-05, 3.9071246514138196e-05),
        (0.00018294556932477851, 2.9099638351563138e-05),
        (0.0004698082304201354, -0.0007031121282780646),
        (-0.0020191045307695037, -0.0032900524463567197),
        (-0.017496623733709978, 0.002094112420821489),
        (-0.024706918470684174, 0.07655217913057108),
        (0.27029867641636773, 0.24854925035056877),
        (0.5465373813623929, -0.6465500809764778),
        (0.27029867641636773, 0.24854925035056874),
        (-0.024706918470684153, 0.07655217913057108),
        (-0.017496623733709978, 0.002094112420821495),
        (-0.002019104530769505, -0.003290052446356719),
        (0.0004698082304201349, -0.0007031121282780647),
        (0.00018294556932477843, 2.9099638351563016e-05),
        (1.0963675727299922e-05, 3.9071246514138156e-05),
        (-6.771119249384538e-06, 5.759997792602947e-06),
        (-1.7663544004133842e-06, -8.199435913216677e-07),
        (1.4028975364327338e-09, -4.2659730956488707e-07),
        (8.502152189645432e-08, -3.8789445288047964e-08),
        (1.5505554284182674e-08, 1.3366904310166896e-08),
        (-1.2399902846635707e-09, 4.309779186582038e-09),
        (-9.712086024644614e-10, 1.479394913266271e-10),
        (-1.1838521838847168e-10, -1.7972232502514703e-10),
        (2.4922865670636636e-11, -4.001803240460712e-11),
        (1.0246090232366193e-11, 1.2947303316630936e-12),
        (6.807052659381291e-13, 2.1575501674052924e-12),
        (-3.6701304937219537e-13, 3.3305332772842716e-13),
        (-9.988952902414343e-14, -4.2534069012020185e-14),
        (-6.837825630006292e-16, -2.3773411640695915e-14),
        (4.668296634973646e-15, -2.3132889120999662e-15),
        (8.878772618067062e-16, 7.171374108453679e-16),
        (-6.139709285412723e-17, 2.4236480148884853e-16),
        (-5.3853562937565375e-17, 9.978199271203465e-18),
        (-6.9176812441969644e-18, -9.803058233266483e-18),
        (1.3172777758985866e-18, -2.2744048365125663e-18),
        (5.732464022727989e-19, 5.3844346454996147e-20),
        (4.178398814541534e-20, 1.1900744351045568e-19),
        (-1.985587068869376e-20, 1.9213967247892488e-20),
        (-5.642027237928265e-21, -2.1916735200334952e-21),
        (-8.056403479220556e-23, -1.3234835445503446e-21),
        (2.5599556191848503e-22, -1.3723950812532651e-22),
        (5.075529727035115e-23, 3.8374558471682377e-23),
        (-2.9882829049918372e-24, 1.361474294146875e-23),
        (-2.9830123384067196e-24, 6.521954555781273e-25),
        (-4.029773163238554e-25, -5.338913488553714e-25),
        (6.933914321240602e-26, -1.2908747539722952e-25),
        (3.2038676626263176e-26, 1.976432854141319e-27),
        (2.540854198396622e-27, 6.556715571253849e-27),
        (-1.0720926859746787e-27, 1.106107976757717e-27),
        (-3.1830030815077727e-28, -1.1204734098985684e-28),
        (-6.853102232416155e-30, -7.360340986022537e-29),
        (1.4019488529279362e-29, -8.10451554892615e-30),
        (2.8967343588234107e-30, 2.0476564865341318e-30),
        (-1.4219602306597286e-31, 7.639796513423022e-31),
        (-1.650556332630767e-31, 4.167021417820151e-32),
        (-2.3407831761175126e-32, -2.902570119475802e-32),
        (3.651094438130981e-33, -7.311200819696277e-33),
        (1.846556722508105e-33, -1.064353878271593e-35)
    ];
    let comp_row = from_tuples::<f64>(&tups);
    let mag: f64 = comp_row.iter().map(|c| c.norm_sqr()).sum();
    Box::new(move |row: u64| -> Vec<(u64, Complex<f64>)> {
        comp_row.iter().cloned().enumerate().map(|(indx, c)| {
            let indx = indx as u64;
            let col = if row + indx < SELECTED_ROW {
                (1 << n) + (row + indx) - SELECTED_ROW
            } else {
                row + indx - SELECTED_ROW
            };
            (col, c)
        }).collect()
    })
}
